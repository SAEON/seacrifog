name: DEV

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: self-hosted
    steps:
    
    - uses: actions/checkout@v2
      with:
        ref: master

    - name: Configure the API
      run: |
        echo "PORT=${{ secrets.API_PORT }}" > ./api/.env
        echo "ALLOWED_ORIGINS=${{ secrets.API_ALLOWED_ORIGINS_DEV }}" >> ./api/.env
        echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> ./api/.env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> ./api/.env
        echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE_DEV }}" >> ./api/.env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> ./api/.env
        echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> ./api/.env
        echo "FORCE_DB_RESET=true" >> ./api/.env
        echo "INITIAL_CRON_WAIT=600000" >> ./api/.env
        echo "ICOS_INTEGRATION_SCHEDULE=0 1 * * *" >>./api/.env

    - name: Configure the client
      run: |
        echo "GQL_ENDPOINT=${{ secrets.GQL_ENDPOINT_DEV }}" > ./client/.env
        echo "HTTP_ENDPOINT=${{ secrets.HTTP_ENDPOINT_DEV }}" >> ./client/.env
        echo "DOWNLOADS_ENDPOINT=${{ secrets.DOWNLOADS_ENDPOINT_DEV }}" >> ./client/.env
    
    - name: Configure the server
      run: |
        sudo /opt/copy-nginx-vhosts.sh # This script contains this command: cp ./nginx/vhosts/* /etc/nginx/conf.d/
        sudo /opt/reload-nginx.sh # This script contains this command: service nginx reload

    - name: Deploy the API, client, and PostGIS
      run: |
        echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" > ./.env
        /usr/local/bin/docker-compose up -d --force-recreate --build
